import requests

# ------------------------------------------------------------------------
# Function to Add cards
# ------------------------------------------------------------------------
# This adds up the cards
def add_cards(cards):

    score = 0
    aces = 0
    #This associates a number with the facecards so i can add them to numbers
    key = {'JACK': 10, 'QUEEN': 10, 'KING': 10, 'ACE': 11}
    
    for card in cards:
        value = card['value']
        if value in key:
            score += key[value]
        else:
            score += int(value)
        if value == 'ACE':
            aces += 1
    #This automatically changes the Ace from an 11 to a 1 to prevent busting
    while score > 21 and aces:
        score -= 10
        aces -= 1
    
    return score
# ------------------------------------------------------------------------
# Function to Display the cards
# ------------------------------------------------------------------------
# This Displays the Dealer and User cards
def display_cards(player_cards, dealer_cards, player_score, dealer_score):
    print("\nDealer's Cards: [", dealer_cards[0]['value'], "of", dealer_cards[0]['suit'], "] [ ? ]")
    print("Your Cards: ", [(card['value'], card['suit']) for card in player_cards])
    print(f"Your current score: {player_score}")
    
# ------------------------------------------------------------------------
# Function for the Users turn
# ------------------------------------------------------------------------
# UI for the User
def player_turn(deck_id, player_cards):
    while True:
        action = input("Do you want to hit (h) or stand (s)? ").lower()
        if action == 'h':
            # Draw one cal
            response = requests.get(f'https://www.deckofcardsapi.com/api/deck/{deck_id}/draw/?count=1')
            new_card = response.json()['cards'][0]
            player_cards.append(new_card)
            score = add_cards(player_cards)
            print(f"You drew: {new_card['value']} of {new_card['suit']}")
            print(f"Your score is now: {score}")
            
            if score > 21:
                print("You busted! Dealer wins.")
                return score, True
        elif action == 's':
            return add_cards(player_cards), False
        else:
            print("Invalid input, please enter 'h' for hit or 's' for stand.")
# ------------------------------------------------------------------------
# Function for the Dealers turn
# ------------------------------------------------------------------------
# Post-User decision "dealer" hit or not
def dealer_turn(deck_id, dealer_cards):
    dealer_score = add_cards(dealer_cards)
    
    while dealer_score < 17:
        # Calls for another card if dealers hand is less than 17
        response = requests.get(f'https://www.deckofcardsapi.com/api/deck/{deck_id}/draw/?count=1')
        new_card = response.json()['cards'][0]
        dealer_cards.append(new_card)
        dealer_score = add_cards(dealer_cards)
        print(f"Dealer drew: {new_card['value']} of {new_card['suit']}")
    
    print(f"Dealer's final score: {dealer_score}")
    return dealer_score
# ------------------------------------------------------------------------
Function to Replay instead of it just ending
# ------------------------------------------------------------------------
# UI for replay
def play_again():
    while True:
        choice = input("Do you want to play again? (y/n): ").lower()
        if choice == 'y':
            return True
        elif choice == 'n':
            return False
        else:
            print("Invalid input, please enter 'y' or 'n'.")
# ------------------------------------------------------------------------
Main Function. Runs it all.
# ------------------------------------------------------------------------
# Main bit
def blackjack_game():
    while True:
        shufflecall = requests.get('https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
        deck = shufflecall.json()
        deck_id = deck['deck_id']

        dcards = requests.get(f'https://www.deckofcardsapi.com/api/deck/{deck_id}/draw/?count=2')
        dealer_cards = dcards.json()['cards']

        pcards = requests.get(f'https://www.deckofcardsapi.com/api/deck/{deck_id}/draw/?count=2')
        player_cards = pcards.json()['cards']

        player_score = add_cards(player_cards)
        dealer_score = add_cards(dealer_cards)

        display_cards(player_cards, dealer_cards, player_score, dealer_score)

        # Player's turn
        player_score, busted = player_turn(deck_id, player_cards)
        if busted:
            print("Dealer wins! You busted.")
        else:
            # Dealer's turn
            dealer_score = dealer_turn(deck_id, dealer_cards)
            
            # Compare
            if dealer_score > 21 or player_score > dealer_score:
                print("You win!")
            elif dealer_score > player_score:
                print("Dealer wins!")
            else:
                print("It's a tie!")

        # Play Again
        if not play_again():
            print("Thanks for playing!")
            break

# Start the game
blackjack_game()

# ------------------------------------------------------------------------
